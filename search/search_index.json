{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Maxis NB-IoT Challenge Workshop \u00b6 In the end of the workshop, you will learn how to: Interface, control and acquire data from various kinds of sensors using Raspberry Pi with Grove Pi. Establish connection between Raspberry Pi and Maxis NB-IoT network. Send sensor telemetry from Raspberry Pi to Microsoft Azure Cloud via NB-IoT network. Create simple server and web application to view and monitor the activity of the sensors connected to Raspberry Pi. Courses \u00b6 Microsoft Azure Basic Setup \u00b6 Rasbperry Pi + Azure Integration \u00b6 Raspberry Pi + Grove Pi Setup \u00b6 Raspberry Pi + NB-IoT Setup \u00b6 Build Sensors Monitoring Web Application hosted at Azure Cloud \u00b6 Downloads \u00b6 Related materials are at https://github.com/CytronTechnologies/maxis-nbiot-hackathon . You can either git clone this repo or simply download it.","title":"Home"},{"location":"#maxis-nb-iot-challenge-workshop","text":"In the end of the workshop, you will learn how to: Interface, control and acquire data from various kinds of sensors using Raspberry Pi with Grove Pi. Establish connection between Raspberry Pi and Maxis NB-IoT network. Send sensor telemetry from Raspberry Pi to Microsoft Azure Cloud via NB-IoT network. Create simple server and web application to view and monitor the activity of the sensors connected to Raspberry Pi.","title":"Maxis NB-IoT Challenge Workshop"},{"location":"#courses","text":"","title":"Courses"},{"location":"#microsoft-azure-basic-setup","text":"","title":"Microsoft Azure Basic Setup"},{"location":"#rasbperry-pi-azure-integration","text":"","title":"Rasbperry Pi + Azure Integration"},{"location":"#raspberry-pi-grove-pi-setup","text":"","title":"Raspberry Pi + Grove Pi Setup"},{"location":"#raspberry-pi-nb-iot-setup","text":"","title":"Raspberry Pi + NB-IoT Setup"},{"location":"#build-sensors-monitoring-web-application-hosted-at-azure-cloud","text":"","title":"Build Sensors Monitoring Web Application hosted at Azure Cloud"},{"location":"#downloads","text":"Related materials are at https://github.com/CytronTechnologies/maxis-nbiot-hackathon . You can either git clone this repo or simply download it.","title":"Downloads"},{"location":"azure/","text":"Create Iot Hub and Devices In Azure \u00b6 Steps \u00b6 Sign up for Free Microsoft Azure Account \u00b6 To create and use Azure services, you will eventually need an account. Remember, the account is free - you will not be charged for any services until you convert the account to a pay-as-you-go account. Note You will need a valid credit card to create the account. This is used for age and identity validation only. Your card will not be charged until you decide to upgrade the free/trial account to a full subscription. In a web browser, navigate to azure.microsoft.com , and click Free Account . On the Create your Azure free account today page, click Start free > button. Scroll down through the page - it lists the products you can access for free, as well as the free products available for the first year. Click the Start free > button. You'll be prompted to sign in with your Microsoft account. Sign in with your Microsoft credentials or create a new free Microsoft account. On the About you page, select your correct country or region, and then enter your first and last names, along with your email address and phone number. Depending on your country, you may see additional fields, such as a VAT number. Click Next to continue. On the Identity verification by phone screen, select your country code, and type the number of a telephone to which you have immediate access. You have the option of text or callback to obtain a verification code. Click the relevant button, type the code in the Verification code box, and click Verify code . If the verification code is correct, you will now be asked to enter details of a valid credit card. Enter the card number, the expiration date, the CVV number, your name, and address, and click Next . Finally, check the box to accept the subscription agreement, privacy statement, and communications policy. The second checkbox is optional. Now click Sign up . Reference For reference, please visit Microsoft Documentation - Create an Azure account Install Azure Command-Line Interface (CLI) \u00b6 The Azure command-line interface (CLI) is Microsoft's cross-platform command-line experience for managing Azure resources. The Azure CLI is easy to learn and the perfect tool for building custom automation that works with Azure resources. Windows 10 Ubuntu 16.04+ macOS Azure Cloud Shell Download the MSI installer Ubuntu install instructions macOS install instructions Run in your browser on Azure Cloud Shell See all of the supported installation platforms. Reference For more references, please visit Microsoft Documentations - Overview of Azure CLI Create IoT Hub \u00b6 This section describes how to create an IoT hub using the Azure portal . Log in to the Azure portal . Choose + Create a resource , then Search the Marketplace for the IoT Hub . Select IoT Hub and click the Create button. You see the first screen for creating an IoT hub. Fill in the fields. Subscription : Select the subscription to use for your IoT hub. Resource Group : You can create a new resource group or use an existing one. To create a new one, click Create new and fill in the name you want to use. To use an existing resource group, click Use existing and select the resource group from the dropdown list. For more information, see Manage Azure Resource Manager resource groups . Region : This is the region in which you want your hub to be located. Select the location closest to you from the dropdown list. IoT Hub Name : Put in the name for your IoT Hub. This name must be globally unique. If the name you enter is available, a green check mark appears. Important!! Because the IoT hub will be publicly discoverable as a DNS endpoint, be sure to avoid entering any sensitive or personally identifiable information when you name it. Click Next: Size and scale to continue creating your IoT hub. On this screen, you can take the defaults and just click Review + create at the bottom. Pricing and scale tier : You can choose from several tiers depending on how many features you want and how many messages you send through your solution per day. The free tier is intended for testing and evaluation. It allows 500 devices to be connected to the IoT hub and up to 8,000 messages per day. Each Azure subscription can create one IoT Hub in the free tier. IoT Hub units : The number of messages allowed per unit per day depends on your hub's pricing tier. For example, if you want the IoT hub to support ingress of 700,000 messages, you choose two S1 tier units. For details about the other tier options, see Choosing the right IoT Hub tier . Advanced / Device-to-cloud partitions : This property relates the device-to-cloud messages to the number of simultaneous readers of the messages. Most IoT hubs only need four partitions. Click Review + create to review your choices. You see something similar to this screen. Click Create to create your new IoT hub. Creating the hub takes a few minutes. Reference For more references, please visit Microsoft Documentations - Create an IoT hub using the Azure portal . Register Iot Devices \u00b6 A device must be registered with your IoT hub before it can connect. In this quickstart, you can use local terminal or Azure Cloud Shell to register a simulated device. Login to your Azure Account with command below. az login Run the following command to create the device identity. az iot hub device-identity create --hub-name <YourIoTHubName> --device-id <NameOfYourDevice> YourIoTHubName : Replace this placeholder below with the name you choose for your IoT hub. NameOfYourDevice : The name of the device you're registering. You can choose any name for your device. In following workshop, you will need to use the same device name throughout this article. You will also need to update the device name in the sample applications before you run them. Run the following commands in local terminal or Azure Cloud Shell to get the device connection string for the device you just registered: az iot hub device-identity show-connection-string --hub-name <YourIoTHubName> --device-id <NameOfYourDevice> --output table YourIoTHubName : Replace this placeholder below with the name you choose for your IoT hub. Note Make a note of the device connection string, which looks like HostName=<YourIoTHubName>.azure-devices.net;DeviceId=<NameOfYourDevice>;SharedAccessKey={YourSharedAccessKey} . You use this value later in the quickstart. You also need a service connection string to enable the back-end application to connect to your IoT hub and retrieve the messages. The following command retrieves the service connection string for your IoT hub: az iot hub show-connection-string --name YourIoTHubName --policy-name service --output table YourIoTHubName : Replace this placeholder below with the name you choose for your IoT hub. Note Make a note of the service connection string, which looks like HostName=<YourIoTHubName>.azure-devices.net;SharedAccessKeyName=service;SharedAccessKey={YourSharedAccessKey} . You use this value later in the quickstart. Important!! The service connection string is different from the device connection string. Send simulated telemetry \u00b6 The simulated device application connects to a device-specific endpoint on your IoT hub and sends simulated temperature and humidity telemetry. In this workshop, we will be using Python as main language. Check if Python is installed. You can verify the current version of Python on your development machine using one of the following commands: Python2 python --version Python3 python3 --version You can download Python from Python.org . Run the following command to add the Microsoft Azure IoT Extension for Azure CLI to your Cloud Shell instance. The IOT Extension adds IoT Hub, IoT Edge, and IoT Device Provisioning Service (DPS) specific commands to Azure CLI. az extension add --name azure-cli-iot-ext Download the sample Python project from https://github.com/Azure-Samples/azure-iot-samples-python/archive/master.zip and extract the ZIP archive. Under Linux or MacOS system, make sure Boost Library is installed. Skip this step if Windows system is used. Linux apt-get install libboost-python-dev MacOS brew install boost Navigate to the root folder of the downloaded sample Python project. Then navigate to the iot-hub\\Quickstarts\\simulated-device folder. Open the SimulatedDevice.py file in a text editor of your choice. Replace the value of the CONNECTION_STRING variable with the device connection string you made a note of previously. Then save your changes to SimulatedDevice.py file. In the local terminal window, run the following commands to install the required libraries for the simulated device application: pip install azure - iothub - device - client In the local terminal window, run the following commands to run the simulated device application: python SimulatedDevice.py The following screenshot shows the output as the simulated device application sends telemetry to your IoT hub: Troubleshoot To avoid the import iothub_client error The current version of the Azure IoT SDK for Python is a wrapper over our C SDK . It is generated using the Boost library. Because of that, it comes with several significant limitations. See more details here Check that you have the right version of Python . Be aware that only certain versions works fine for this sample. Check that you have the right version of C++ runtime Microsoft Visual C++ Redistributable for Visual Studio 2019 . (We recommend the latest). Verify that you have installed the iothub client: pip install azure-iothub-device-client . Read telemetry from Cloud \u00b6 The IoT Hub CLI extension can connect to the service-side Events endpoint on your IoT Hub. The extension receives the device-to-cloud messages sent from your simulated device. An IoT Hub back-end application typically runs in the cloud to receive and process device-to-cloud messages. Run the following commands in local terminal or Azure Cloud Shell, replacing YourIoTHubName with the name of your IoT hub: az iot hub monitor-events --hub-name YourIoTHubName --device-id <NameOfYourDevice> The following screenshot shows the output as the extension receives telemetry sent by the simulated device to the hub: References \u00b6 For more info, please visit https://docs.microsoft.com/en-us/azure/iot-hub/","title":"Azure"},{"location":"azure/#create-iot-hub-and-devices-in-azure","text":"","title":"Create Iot Hub and Devices In Azure"},{"location":"azure/#steps","text":"","title":"Steps"},{"location":"azure/#sign-up-for-free-microsoft-azure-account","text":"To create and use Azure services, you will eventually need an account. Remember, the account is free - you will not be charged for any services until you convert the account to a pay-as-you-go account. Note You will need a valid credit card to create the account. This is used for age and identity validation only. Your card will not be charged until you decide to upgrade the free/trial account to a full subscription. In a web browser, navigate to azure.microsoft.com , and click Free Account . On the Create your Azure free account today page, click Start free > button. Scroll down through the page - it lists the products you can access for free, as well as the free products available for the first year. Click the Start free > button. You'll be prompted to sign in with your Microsoft account. Sign in with your Microsoft credentials or create a new free Microsoft account. On the About you page, select your correct country or region, and then enter your first and last names, along with your email address and phone number. Depending on your country, you may see additional fields, such as a VAT number. Click Next to continue. On the Identity verification by phone screen, select your country code, and type the number of a telephone to which you have immediate access. You have the option of text or callback to obtain a verification code. Click the relevant button, type the code in the Verification code box, and click Verify code . If the verification code is correct, you will now be asked to enter details of a valid credit card. Enter the card number, the expiration date, the CVV number, your name, and address, and click Next . Finally, check the box to accept the subscription agreement, privacy statement, and communications policy. The second checkbox is optional. Now click Sign up . Reference For reference, please visit Microsoft Documentation - Create an Azure account","title":"Sign up for Free Microsoft Azure Account"},{"location":"azure/#install-azure-command-line-interface-cli","text":"The Azure command-line interface (CLI) is Microsoft's cross-platform command-line experience for managing Azure resources. The Azure CLI is easy to learn and the perfect tool for building custom automation that works with Azure resources. Windows 10 Ubuntu 16.04+ macOS Azure Cloud Shell Download the MSI installer Ubuntu install instructions macOS install instructions Run in your browser on Azure Cloud Shell See all of the supported installation platforms. Reference For more references, please visit Microsoft Documentations - Overview of Azure CLI","title":"Install Azure Command-Line Interface (CLI)"},{"location":"azure/#create-iot-hub","text":"This section describes how to create an IoT hub using the Azure portal . Log in to the Azure portal . Choose + Create a resource , then Search the Marketplace for the IoT Hub . Select IoT Hub and click the Create button. You see the first screen for creating an IoT hub. Fill in the fields. Subscription : Select the subscription to use for your IoT hub. Resource Group : You can create a new resource group or use an existing one. To create a new one, click Create new and fill in the name you want to use. To use an existing resource group, click Use existing and select the resource group from the dropdown list. For more information, see Manage Azure Resource Manager resource groups . Region : This is the region in which you want your hub to be located. Select the location closest to you from the dropdown list. IoT Hub Name : Put in the name for your IoT Hub. This name must be globally unique. If the name you enter is available, a green check mark appears. Important!! Because the IoT hub will be publicly discoverable as a DNS endpoint, be sure to avoid entering any sensitive or personally identifiable information when you name it. Click Next: Size and scale to continue creating your IoT hub. On this screen, you can take the defaults and just click Review + create at the bottom. Pricing and scale tier : You can choose from several tiers depending on how many features you want and how many messages you send through your solution per day. The free tier is intended for testing and evaluation. It allows 500 devices to be connected to the IoT hub and up to 8,000 messages per day. Each Azure subscription can create one IoT Hub in the free tier. IoT Hub units : The number of messages allowed per unit per day depends on your hub's pricing tier. For example, if you want the IoT hub to support ingress of 700,000 messages, you choose two S1 tier units. For details about the other tier options, see Choosing the right IoT Hub tier . Advanced / Device-to-cloud partitions : This property relates the device-to-cloud messages to the number of simultaneous readers of the messages. Most IoT hubs only need four partitions. Click Review + create to review your choices. You see something similar to this screen. Click Create to create your new IoT hub. Creating the hub takes a few minutes. Reference For more references, please visit Microsoft Documentations - Create an IoT hub using the Azure portal .","title":"Create IoT Hub"},{"location":"azure/#register-iot-devices","text":"A device must be registered with your IoT hub before it can connect. In this quickstart, you can use local terminal or Azure Cloud Shell to register a simulated device. Login to your Azure Account with command below. az login Run the following command to create the device identity. az iot hub device-identity create --hub-name <YourIoTHubName> --device-id <NameOfYourDevice> YourIoTHubName : Replace this placeholder below with the name you choose for your IoT hub. NameOfYourDevice : The name of the device you're registering. You can choose any name for your device. In following workshop, you will need to use the same device name throughout this article. You will also need to update the device name in the sample applications before you run them. Run the following commands in local terminal or Azure Cloud Shell to get the device connection string for the device you just registered: az iot hub device-identity show-connection-string --hub-name <YourIoTHubName> --device-id <NameOfYourDevice> --output table YourIoTHubName : Replace this placeholder below with the name you choose for your IoT hub. Note Make a note of the device connection string, which looks like HostName=<YourIoTHubName>.azure-devices.net;DeviceId=<NameOfYourDevice>;SharedAccessKey={YourSharedAccessKey} . You use this value later in the quickstart. You also need a service connection string to enable the back-end application to connect to your IoT hub and retrieve the messages. The following command retrieves the service connection string for your IoT hub: az iot hub show-connection-string --name YourIoTHubName --policy-name service --output table YourIoTHubName : Replace this placeholder below with the name you choose for your IoT hub. Note Make a note of the service connection string, which looks like HostName=<YourIoTHubName>.azure-devices.net;SharedAccessKeyName=service;SharedAccessKey={YourSharedAccessKey} . You use this value later in the quickstart. Important!! The service connection string is different from the device connection string.","title":"Register Iot Devices"},{"location":"azure/#send-simulated-telemetry","text":"The simulated device application connects to a device-specific endpoint on your IoT hub and sends simulated temperature and humidity telemetry. In this workshop, we will be using Python as main language. Check if Python is installed. You can verify the current version of Python on your development machine using one of the following commands: Python2 python --version Python3 python3 --version You can download Python from Python.org . Run the following command to add the Microsoft Azure IoT Extension for Azure CLI to your Cloud Shell instance. The IOT Extension adds IoT Hub, IoT Edge, and IoT Device Provisioning Service (DPS) specific commands to Azure CLI. az extension add --name azure-cli-iot-ext Download the sample Python project from https://github.com/Azure-Samples/azure-iot-samples-python/archive/master.zip and extract the ZIP archive. Under Linux or MacOS system, make sure Boost Library is installed. Skip this step if Windows system is used. Linux apt-get install libboost-python-dev MacOS brew install boost Navigate to the root folder of the downloaded sample Python project. Then navigate to the iot-hub\\Quickstarts\\simulated-device folder. Open the SimulatedDevice.py file in a text editor of your choice. Replace the value of the CONNECTION_STRING variable with the device connection string you made a note of previously. Then save your changes to SimulatedDevice.py file. In the local terminal window, run the following commands to install the required libraries for the simulated device application: pip install azure - iothub - device - client In the local terminal window, run the following commands to run the simulated device application: python SimulatedDevice.py The following screenshot shows the output as the simulated device application sends telemetry to your IoT hub: Troubleshoot To avoid the import iothub_client error The current version of the Azure IoT SDK for Python is a wrapper over our C SDK . It is generated using the Boost library. Because of that, it comes with several significant limitations. See more details here Check that you have the right version of Python . Be aware that only certain versions works fine for this sample. Check that you have the right version of C++ runtime Microsoft Visual C++ Redistributable for Visual Studio 2019 . (We recommend the latest). Verify that you have installed the iothub client: pip install azure-iothub-device-client .","title":"Send simulated telemetry"},{"location":"azure/#read-telemetry-from-cloud","text":"The IoT Hub CLI extension can connect to the service-side Events endpoint on your IoT Hub. The extension receives the device-to-cloud messages sent from your simulated device. An IoT Hub back-end application typically runs in the cloud to receive and process device-to-cloud messages. Run the following commands in local terminal or Azure Cloud Shell, replacing YourIoTHubName with the name of your IoT hub: az iot hub monitor-events --hub-name YourIoTHubName --device-id <NameOfYourDevice> The following screenshot shows the output as the extension receives telemetry sent by the simulated device to the hub:","title":"Read telemetry from Cloud"},{"location":"azure/#references","text":"For more info, please visit https://docs.microsoft.com/en-us/azure/iot-hub/","title":"References"},{"location":"azure/install-azure-cli-apt/","text":"Install Azure CLI with apt \u00b6 If you are running a distribution that comes with apt , such as Ubuntu or Debian, there's an x86_64 package available for the Azure CLI. This package has been tested with and is supported for: Ubuntu trusty, xenial, artful, bionic, and disco Debian wheezy, jessie, and stretch Note The package for Azure CLI installs its own Python interpreter, and does not use the system Python. Install \u00b6 We offer two ways to install the Azure CLI with distributions that support apt : As an all-in-one script that runs the install commands for you, and instructions that you can run as a step-by-step process on your own. Install with one command \u00b6 We offer and maintain a script which runs all of the installation commands in one step. Run it by using curl and pipe directly to bash , or download the script to a file and inspect it before running. curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash Note This script is only verified for Ubuntu 16.04+ and Debian 8+. It may not work on other distributions. If you're using a derived distribution such as Linux Mint, follow the manual install instructions and perform any necessary troubleshooting. Manual install instructions \u00b6 If you don't want to run a script as superuser, follow these manual steps to install the Azure CLI. Get packages needed for the install process: sudo apt-get update sudo apt-get install curl apt-transport-https lsb-release gnupg Download and install the Microsoft signing key: curl -sL https://packages.microsoft.com/keys/microsoft.asc | \\ gpg --dearmor | \\ sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null Add the Azure CLI software repository: AZ_REPO=$(lsb_release -cs) echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main\" | \\ sudo tee /etc/apt/sources.list.d/azure-cli.list Update repository information and install the azure-cli package: sudo apt-get update sudo apt-get install azure-cli Run the Azure CLI with the az command. To sign in, use the az login command. To learn more about different authentication methods, see Sign in with Azure CLI . Troubleshooting \u00b6 Here are some common problems seen when installing with apt . If you experience a problem not covered here, file an issue on github . lsb_release does not return the correct base distribution version \u00b6 Some Ubuntu- or Debian-derived distributions such as Linux Mint may not return the correct version name from lsb_release . This value is used in the install process to determine the package to install. If you know the code name of the Ubuntu or Debian version your distribution is derived from, you can set the AZ_REPO value manually when adding the repository . Otherwise, look up information for your distribution on how to determine the base distribution code name and set AZ_REPO to the correct value. No package for your distribution \u00b6 Sometimes it may be a while after a distribution is released before there's an Azure CLI package available for it. The Azure CLI designed to be resilient with regards to future versions of dependencies and rely on as few of them as possible. If there's no package available for your base distribution, try a package for an earlier distribution. To do this, set the value of AZ_REPO manually when adding the repository . For Ubuntu distributions use the bionic repository, and for Debian distributions use stretch . Distributions released before Ubuntu Trusty and Debian Wheezy are not supported. Proxy blocks connection \u00b6 If you're unable to connect to an external resource due to a proxy, make sure that you've correctly set the HTTP_PROXY and HTTPS_PROXY variables in your shell. You will need to contact your system administrator to know what host(s) and port(s) to use for these proxies. These values are respected by many Linux programs, including those which are used in the install process. To set these values: No auth export HTTP_PROXY=http://[proxy]:[port] export HTTPS_PROXY=https://[proxy]:[port] Basic auth export HTTP_PROXY=http://[username]:[password]@[proxy]:[port] export HTTPS_PROXY=https://[username]:[password]@[proxy]:[port] Note If you are behind a proxy, these shell variables must be set to connect to Azure services with the CLI. If you are not using basic auth, it's recommended to export these variables in your .bashrc file. Always follow your business' security policies and the requirements of your system administrator. You may also want to explicitly configure apt to use this proxy at all times. Make sure that the following lines appear in an apt configuration file in /etc/apt/apt.conf.d/ . We recommend using either your existing global configuration file, an existing proxy configuration file, 40proxies , or 99local , but follow your system administration requirements. Acquire { http::proxy \"http://[username]:[password]@[proxy]:[port]\"; https::proxy \"https://[username]:[password]@[proxy]:[port]\"; } If your proxy does not use basic auth, remove the [username]:[password]@ portion of the proxy URI. If you require more information for proxy configuration, see the official Ubuntu documentation: apt.conf manpage Ubuntu wiki - apt-get howto In order to get the Microsoft signing key and get the package from our repository, your proxy needs to allow HTTPS connections to the following address: https://packages.microsoft.com CLI fails to install or run on Windows Subsystem for Linux \u00b6 Since Windows Subsystem for Linux (WSL) is a system call translation layer on top of the Windows platform, you might experience an error when trying to install or run the Azure CLI. The CLI relies on some features that may have a bug in WSL. If you experience an error no matter how you install the CLI, there's a good chance it's an issue with WSL and not with the CLI install process. To troubleshoot your WSL installation and possibly resolve issues: If you can, run an identical install process on a Linux machine or VM to see if it succeeds. If it does, your issue is almost certainly related to WSL. To start a Linux VM in Azure, see the create a Linux VM in the Azure Portal documentation. Make sure that you're running the latest version of WSL. To get the latest version, update your Windows 10 installation . Check for any open issues with WSL which might address your problem. Often there will be suggestions on how to work around the problem, or information about a release where the issue will be fixed. If there are no existing issues for your problem, file a new issue with WSL and make sure that you include as much information as possible. If you continue to have issues installing or running on WSL, consider installing the CLI for Windows . Update \u00b6 Use apt-get upgrade to update the CLI package. sudo apt-get update && sudo apt-get upgrade Note This command upgrades all of the installed packages on your system that have not had a dependency change. To upgrade the CLI only, use apt-get install . sudo apt-get update && sudo apt-get install --only-upgrade -y azure-cli Uninstall \u00b6 Uninstall with apt-get remove : sudo apt-get remove -y azure-cli If you don't plan to reinstall the CLI, remove the Azure CLI repository information: sudo rm /etc/apt/sources.list.d/azure-cli.list Remove the signing key: sudo rm /etc/apt/trusted.gpg.d/microsoft.asc.gpg Remove any unneeded packages: sudo apt autoremove References For more references, please refer to Microsoft Documentation - Install Azure CLI with apt","title":"Install Azure CLI with apt"},{"location":"azure/install-azure-cli-apt/#install-azure-cli-with-apt","text":"If you are running a distribution that comes with apt , such as Ubuntu or Debian, there's an x86_64 package available for the Azure CLI. This package has been tested with and is supported for: Ubuntu trusty, xenial, artful, bionic, and disco Debian wheezy, jessie, and stretch Note The package for Azure CLI installs its own Python interpreter, and does not use the system Python.","title":"Install Azure CLI with apt"},{"location":"azure/install-azure-cli-apt/#install","text":"We offer two ways to install the Azure CLI with distributions that support apt : As an all-in-one script that runs the install commands for you, and instructions that you can run as a step-by-step process on your own.","title":"Install"},{"location":"azure/install-azure-cli-apt/#install-with-one-command","text":"We offer and maintain a script which runs all of the installation commands in one step. Run it by using curl and pipe directly to bash , or download the script to a file and inspect it before running. curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash Note This script is only verified for Ubuntu 16.04+ and Debian 8+. It may not work on other distributions. If you're using a derived distribution such as Linux Mint, follow the manual install instructions and perform any necessary troubleshooting.","title":"Install with one command"},{"location":"azure/install-azure-cli-apt/#manual-install-instructions","text":"If you don't want to run a script as superuser, follow these manual steps to install the Azure CLI. Get packages needed for the install process: sudo apt-get update sudo apt-get install curl apt-transport-https lsb-release gnupg Download and install the Microsoft signing key: curl -sL https://packages.microsoft.com/keys/microsoft.asc | \\ gpg --dearmor | \\ sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null Add the Azure CLI software repository: AZ_REPO=$(lsb_release -cs) echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main\" | \\ sudo tee /etc/apt/sources.list.d/azure-cli.list Update repository information and install the azure-cli package: sudo apt-get update sudo apt-get install azure-cli Run the Azure CLI with the az command. To sign in, use the az login command. To learn more about different authentication methods, see Sign in with Azure CLI .","title":"Manual install instructions"},{"location":"azure/install-azure-cli-apt/#troubleshooting","text":"Here are some common problems seen when installing with apt . If you experience a problem not covered here, file an issue on github .","title":"Troubleshooting"},{"location":"azure/install-azure-cli-apt/#lsb_release-does-not-return-the-correct-base-distribution-version","text":"Some Ubuntu- or Debian-derived distributions such as Linux Mint may not return the correct version name from lsb_release . This value is used in the install process to determine the package to install. If you know the code name of the Ubuntu or Debian version your distribution is derived from, you can set the AZ_REPO value manually when adding the repository . Otherwise, look up information for your distribution on how to determine the base distribution code name and set AZ_REPO to the correct value.","title":"lsb_release does not return the correct base distribution version"},{"location":"azure/install-azure-cli-apt/#no-package-for-your-distribution","text":"Sometimes it may be a while after a distribution is released before there's an Azure CLI package available for it. The Azure CLI designed to be resilient with regards to future versions of dependencies and rely on as few of them as possible. If there's no package available for your base distribution, try a package for an earlier distribution. To do this, set the value of AZ_REPO manually when adding the repository . For Ubuntu distributions use the bionic repository, and for Debian distributions use stretch . Distributions released before Ubuntu Trusty and Debian Wheezy are not supported.","title":"No package for your distribution"},{"location":"azure/install-azure-cli-apt/#proxy-blocks-connection","text":"If you're unable to connect to an external resource due to a proxy, make sure that you've correctly set the HTTP_PROXY and HTTPS_PROXY variables in your shell. You will need to contact your system administrator to know what host(s) and port(s) to use for these proxies. These values are respected by many Linux programs, including those which are used in the install process. To set these values: No auth export HTTP_PROXY=http://[proxy]:[port] export HTTPS_PROXY=https://[proxy]:[port] Basic auth export HTTP_PROXY=http://[username]:[password]@[proxy]:[port] export HTTPS_PROXY=https://[username]:[password]@[proxy]:[port] Note If you are behind a proxy, these shell variables must be set to connect to Azure services with the CLI. If you are not using basic auth, it's recommended to export these variables in your .bashrc file. Always follow your business' security policies and the requirements of your system administrator. You may also want to explicitly configure apt to use this proxy at all times. Make sure that the following lines appear in an apt configuration file in /etc/apt/apt.conf.d/ . We recommend using either your existing global configuration file, an existing proxy configuration file, 40proxies , or 99local , but follow your system administration requirements. Acquire { http::proxy \"http://[username]:[password]@[proxy]:[port]\"; https::proxy \"https://[username]:[password]@[proxy]:[port]\"; } If your proxy does not use basic auth, remove the [username]:[password]@ portion of the proxy URI. If you require more information for proxy configuration, see the official Ubuntu documentation: apt.conf manpage Ubuntu wiki - apt-get howto In order to get the Microsoft signing key and get the package from our repository, your proxy needs to allow HTTPS connections to the following address: https://packages.microsoft.com","title":"Proxy blocks connection"},{"location":"azure/install-azure-cli-apt/#cli-fails-to-install-or-run-on-windows-subsystem-for-linux","text":"Since Windows Subsystem for Linux (WSL) is a system call translation layer on top of the Windows platform, you might experience an error when trying to install or run the Azure CLI. The CLI relies on some features that may have a bug in WSL. If you experience an error no matter how you install the CLI, there's a good chance it's an issue with WSL and not with the CLI install process. To troubleshoot your WSL installation and possibly resolve issues: If you can, run an identical install process on a Linux machine or VM to see if it succeeds. If it does, your issue is almost certainly related to WSL. To start a Linux VM in Azure, see the create a Linux VM in the Azure Portal documentation. Make sure that you're running the latest version of WSL. To get the latest version, update your Windows 10 installation . Check for any open issues with WSL which might address your problem. Often there will be suggestions on how to work around the problem, or information about a release where the issue will be fixed. If there are no existing issues for your problem, file a new issue with WSL and make sure that you include as much information as possible. If you continue to have issues installing or running on WSL, consider installing the CLI for Windows .","title":"CLI fails to install or run on Windows Subsystem for Linux"},{"location":"azure/install-azure-cli-apt/#update","text":"Use apt-get upgrade to update the CLI package. sudo apt-get update && sudo apt-get upgrade Note This command upgrades all of the installed packages on your system that have not had a dependency change. To upgrade the CLI only, use apt-get install . sudo apt-get update && sudo apt-get install --only-upgrade -y azure-cli","title":"Update"},{"location":"azure/install-azure-cli-apt/#uninstall","text":"Uninstall with apt-get remove : sudo apt-get remove -y azure-cli If you don't plan to reinstall the CLI, remove the Azure CLI repository information: sudo rm /etc/apt/sources.list.d/azure-cli.list Remove the signing key: sudo rm /etc/apt/trusted.gpg.d/microsoft.asc.gpg Remove any unneeded packages: sudo apt autoremove References For more references, please refer to Microsoft Documentation - Install Azure CLI with apt","title":"Uninstall"},{"location":"azure/install-azure-cli-macos/","text":"Install Azure CLI on macOS \u00b6 For the macOS platform, you can install the Azure CLI with homebrew package manager . Homebrew makes it easy to keep your installation of the CLI update to date. The CLI package has been tested on macOS versions 10.9 and later. Install \u00b6 Homebrew is the easiest way to manage your CLI install. It provides convenient ways to install, update, and uninstall. If you don't have homebrew available on your system, install homebrew before continuing. You can install the CLI by updating your brew repository information, and then running the install command: brew update && brew install azure-cli The Azure CLI has a dependency on the python3 package in Homebrew, and will install it on your system, even if Python 2 is available. The Azure CLI is guaranteed to be compatible with the latest version of python3 published on Homebrew. You can then run the Azure CLI with the az command. To sign in, use az login command. To learn more about different authentication methods, see Sign in with Azure CLI . Troubleshooting \u00b6 If you encounter a problem when installing the CLI through Homebrew, here are some common errors. If you experience a problem not covered here, file an issue on github . Unable to find Python or installed packages \u00b6 There may be a minor version mismatch or other issue during homebrew installation. The CLI doesn't use a Python virtual environment, so it relies on finding the installed Python version. A possible fix is to install and relink the python3 dependency from Homebrew. brew update && brew install python3 && brew upgrade python3 brew link --overwrite python3 CLI version 1.x is installed \u00b6 If an out-of-date version was installed, it could be because of a stale homebrew cache. Follow the update instructions. Proxy blocks connection \u00b6 You may be unable to get resources from Homebrew unless you have correctly configured it to use your proxy. Follow the Homebrew proxy configuration instructions . If you are behind a proxy, HTTP_PROXY and HTTPS_PROXY must be set to connect to Azure services with the CLI. If you are not using basic auth, it's recommended to export these variables in your .bashrc file. Always follow your business' security policies and the requirements of your system administrator. In order to get the bottle resources from Homebrew, your proxy needs to allow HTTPS connections to the following addresses: https://formulae.brew.sh https://homebrew.bintray.com Update \u00b6 The CLI is regularly updated with bug fixes, improvements, new features, and preview functionality. A new release is available roughly every two weeks. Update your local repository information and then upgrade the azure-cli package. brew update && brew upgrade azure-cli Uninstall \u00b6 Use homebrew to uninstall the azure-cli package. brew uninstall azure-cli Other installation methods \u00b6 If you can't use homebrew to install the Azure CLI in your environment, it's possible to use the manual instructions for Linux. Note that this process is not officially maintained to be compatible with macOS. Using a package manager such as Homebrew is always recommended. Only use the manual installation method if you have no other option available. For the manual installation instructions, see Install Azure CLI on Linux manually .","title":"Install the Azure CLI for macOS"},{"location":"azure/install-azure-cli-macos/#install-azure-cli-on-macos","text":"For the macOS platform, you can install the Azure CLI with homebrew package manager . Homebrew makes it easy to keep your installation of the CLI update to date. The CLI package has been tested on macOS versions 10.9 and later.","title":"Install Azure CLI on macOS"},{"location":"azure/install-azure-cli-macos/#install","text":"Homebrew is the easiest way to manage your CLI install. It provides convenient ways to install, update, and uninstall. If you don't have homebrew available on your system, install homebrew before continuing. You can install the CLI by updating your brew repository information, and then running the install command: brew update && brew install azure-cli The Azure CLI has a dependency on the python3 package in Homebrew, and will install it on your system, even if Python 2 is available. The Azure CLI is guaranteed to be compatible with the latest version of python3 published on Homebrew. You can then run the Azure CLI with the az command. To sign in, use az login command. To learn more about different authentication methods, see Sign in with Azure CLI .","title":"Install"},{"location":"azure/install-azure-cli-macos/#troubleshooting","text":"If you encounter a problem when installing the CLI through Homebrew, here are some common errors. If you experience a problem not covered here, file an issue on github .","title":"Troubleshooting"},{"location":"azure/install-azure-cli-macos/#unable-to-find-python-or-installed-packages","text":"There may be a minor version mismatch or other issue during homebrew installation. The CLI doesn't use a Python virtual environment, so it relies on finding the installed Python version. A possible fix is to install and relink the python3 dependency from Homebrew. brew update && brew install python3 && brew upgrade python3 brew link --overwrite python3","title":"Unable to find Python or installed packages"},{"location":"azure/install-azure-cli-macos/#cli-version-1x-is-installed","text":"If an out-of-date version was installed, it could be because of a stale homebrew cache. Follow the update instructions.","title":"CLI version 1.x is installed"},{"location":"azure/install-azure-cli-macos/#proxy-blocks-connection","text":"You may be unable to get resources from Homebrew unless you have correctly configured it to use your proxy. Follow the Homebrew proxy configuration instructions . If you are behind a proxy, HTTP_PROXY and HTTPS_PROXY must be set to connect to Azure services with the CLI. If you are not using basic auth, it's recommended to export these variables in your .bashrc file. Always follow your business' security policies and the requirements of your system administrator. In order to get the bottle resources from Homebrew, your proxy needs to allow HTTPS connections to the following addresses: https://formulae.brew.sh https://homebrew.bintray.com","title":"Proxy blocks connection"},{"location":"azure/install-azure-cli-macos/#update","text":"The CLI is regularly updated with bug fixes, improvements, new features, and preview functionality. A new release is available roughly every two weeks. Update your local repository information and then upgrade the azure-cli package. brew update && brew upgrade azure-cli","title":"Update"},{"location":"azure/install-azure-cli-macos/#uninstall","text":"Use homebrew to uninstall the azure-cli package. brew uninstall azure-cli","title":"Uninstall"},{"location":"azure/install-azure-cli-macos/#other-installation-methods","text":"If you can't use homebrew to install the Azure CLI in your environment, it's possible to use the manual instructions for Linux. Note that this process is not officially maintained to be compatible with macOS. Using a package manager such as Homebrew is always recommended. Only use the manual installation method if you have no other option available. For the manual installation instructions, see Install Azure CLI on Linux manually .","title":"Other installation methods"},{"location":"raspberrypi/grovepi/","text":"Grove Pi with Raspberry Pi \u00b6 This course explains how to use Grove Pi HAT with Rasbperry Pi to interface, control and get data from sensors. The GrovePi can be programmed in Python , C , C# , Go , and NodeJS on the Raspberry Pi. We will be using Python as main language for the course. Install Grove Pi Python \u00b6 $ sudo curl - kL dexterindustries . com / update_grovepi | bash $ sudo pip install grovepi $ sudo reboot Getting started with Example DHT Temperature & Humidity Sensor \u00b6 Sounds familiar? Temperature and humidity are the values that are being sent to Azure Cloud if you are following previous course. Right now we can send those values from actual hardware DHT11 Temperature & Humidity Sensor. Steps \u00b6 Plug the Grove Pi HAT onto Raspberry Pi. Plug the DHT11 Sensor (Blue color) to port D4 on GrovePi. Create a python script called dht.py. Copy the following content into dht.py. #!/usr/bin/env python import grovepi import math # Connect the Grove Temperature & Humidity Sensor Pro to digital port D4 # This example uses the blue colored sensor. # SIG,NC,VCC,GND sensor = 4 # The Sensor goes on digital port 4. # temp_humidity_sensor_type # Grove Base Kit comes with the blue sensor. blue = 0 # The Blue colored sensor. white = 1 # The White colored sensor. while True : try : # This example uses the blue colored sensor. # The first parameter is the port, the second parameter is the type of sensor. [ temp , humidity ] = grovepi . dht ( sensor , blue ) if math . isnan ( temp ) == False and math . isnan ( humidity ) == False : print ( \"temp = %.02f C humidity = %.02f%% \" % ( temp , humidity )) except IOError : print ( \"Error\" ) Run command python dht.py to run the program. If the setup is correct, we will see temperature and humidity values are showing up. References \u00b6 For more examples, you can visit https://github.com/DexterInd/GrovePi/tree/master/Software/Python For other programming language, you can refer to here https://github.com/DexterInd/GrovePi/tree/master/Software","title":"Grove Pi"},{"location":"raspberrypi/grovepi/#grove-pi-with-raspberry-pi","text":"This course explains how to use Grove Pi HAT with Rasbperry Pi to interface, control and get data from sensors. The GrovePi can be programmed in Python , C , C# , Go , and NodeJS on the Raspberry Pi. We will be using Python as main language for the course.","title":"Grove Pi with Raspberry Pi"},{"location":"raspberrypi/grovepi/#install-grove-pi-python","text":"$ sudo curl - kL dexterindustries . com / update_grovepi | bash $ sudo pip install grovepi $ sudo reboot","title":"Install Grove Pi Python"},{"location":"raspberrypi/grovepi/#getting-started-with-example-dht-temperature-humidity-sensor","text":"Sounds familiar? Temperature and humidity are the values that are being sent to Azure Cloud if you are following previous course. Right now we can send those values from actual hardware DHT11 Temperature & Humidity Sensor.","title":"Getting started with Example DHT Temperature &amp; Humidity Sensor"},{"location":"raspberrypi/grovepi/#steps","text":"Plug the Grove Pi HAT onto Raspberry Pi. Plug the DHT11 Sensor (Blue color) to port D4 on GrovePi. Create a python script called dht.py. Copy the following content into dht.py. #!/usr/bin/env python import grovepi import math # Connect the Grove Temperature & Humidity Sensor Pro to digital port D4 # This example uses the blue colored sensor. # SIG,NC,VCC,GND sensor = 4 # The Sensor goes on digital port 4. # temp_humidity_sensor_type # Grove Base Kit comes with the blue sensor. blue = 0 # The Blue colored sensor. white = 1 # The White colored sensor. while True : try : # This example uses the blue colored sensor. # The first parameter is the port, the second parameter is the type of sensor. [ temp , humidity ] = grovepi . dht ( sensor , blue ) if math . isnan ( temp ) == False and math . isnan ( humidity ) == False : print ( \"temp = %.02f C humidity = %.02f%% \" % ( temp , humidity )) except IOError : print ( \"Error\" ) Run command python dht.py to run the program. If the setup is correct, we will see temperature and humidity values are showing up.","title":"Steps"},{"location":"raspberrypi/grovepi/#references","text":"For more examples, you can visit https://github.com/DexterInd/GrovePi/tree/master/Software/Python For other programming language, you can refer to here https://github.com/DexterInd/GrovePi/tree/master/Software","title":"References"},{"location":"raspberrypi/nbiot/","text":"Testing Raspberry Pi + SIM7000E NB-IoT Hat + Maxis NB-IoT \u00b6 NB-IoT AT command testing \u00b6 AT command test is basic step to check if NB-IoT is working in good condition. Prerequisite \u00b6 Raspberry Pi SIM7000E NB-IoT HAT MicroUSB Type B Cable Steps \u00b6 Insert and lock the NB-IoT SIM card onto NB-IoT HAT (Back). Connect the NB-IoT HAT to Raspberry Pi Board via USB cable. Run the command below on Raspberry Pi to check availability of HAT. It will show /dev/ttyUSB2 if it exists. ls /dev/ttyUSB2 Run the command below to install screen utility on Raspberry Pi, which allows us to communicate to HAT via UART. sudo apt-get install screen Run below command to start. screen /dev/ttyUSB2 115200 Type and enter AT command repeatedly until you see OK in return. Run AT commands below to test connection with Internet. ->: User input # test using AT -> AT OK # check firmware version, make sure it contains SIM7000E -> AT + GSV SIMCOM_Ltd SIMCOM_SIM7000E Revision : 1351 B06SIM7000E # check service, result might be different -> AT + CPSI ? + CPSI : GSM , Online , 502 - 12 , 0x1054 , 62168 , 512 DCS 1800 , - 71 , 0 , 32 - 32 -> AT + CPSI ? + CPSI : NO SERVICE , Online # check signal quality -> AT + CSQ + CSQ : 23 , 99 # configure to use NB-IoT -> AT + CMNB = 2 OK -> AT + CNMP = 38 OK -> AT + CBANDCFG = \"NB-IOT\" , 8 OK -> AT + CSTT = \"M2MXNBIOT\" OK -> AT + CPSI ? + CPSI : LTE NB - IOT , Online , 502 - 12 , 0x74CE , 28185722 , 12 , EUTRAN - BAND8 , 3702 , 0 , 0 , - 10 , - 82 , - 72 , 15 # check establish connection -> AT + CIPSTATUS OK STATE : IP START # start establish connection -> AT + CIICR OK -> AT + CIPSTATUS OK STATE : IP GPRSACT # get IP address -> AT + CIFSR 10.247.96.227 # ping www.google.com -> AT + CIPPING = \"www.google.com\" + CIPPING : 1 , \"172.217.166.132\" , 111 , 52 + CIPPING : 2 , \"172.217.166.132\" , 170 , 52 + CIPPING : 3 , \"172.217.166.132\" , 110 , 52 + CIPPING : 4 , \"172.217.166.132\" , 128 , 52 Run Ctrl-a then Ctrl-d to minimise the screen. To Resume the screen run screen -r . Run Ctrl-a then type: :quit to quit the screen. PPP Installation on Raspberry Pi \u00b6 NB-IoT HAT offers PPP (Point-to-Point Protocol) for us to connect Raspberry Pi to Internet easily. The following steps show how to establish Internet connection with Raspberry Pi. Prerequisite \u00b6 Raspberry Pi SIM7000E NB-IoT HAT MicroUSB Type B Cable Steps \u00b6 Plug the NB-IoT HAT into Raspberry Pi Board using USB. Ensure the Maxis SIM card is inserted and secured on the HAT. Run the command below on Raspberry Pi to check availability of HAT. It will show /dev/ttyUSB2 if it exists. ls /dev/ttyUSB2 Go to directory where you have downloaded the GIT respository. E.g. /home/pi/maxis-nbiot-hackathon cd /home/pi/maxis-nbiot-hackathon Run the commands below to install PPP on Raspberry Pi as root. You will need to enter password after command sudo su $ sudo su $ cd \"Raspberry Pi/PPP Installer\" $ chmod +x install-ppp.sh $ ./install-ppp.sh Run command below to start the connection. pon Run command below to check if interface ppp0 exists. ifconfig If it is successful, you should see IP exists in interface ppp0 from ifconfig command. Run command below to stop the connection. poff Automate the connection during Raspberry Pi boot-up. Run command nano /etc/rc.local to start edit file. Insert 2 lines before line exit 0 in file ... sleep 5 sudo pon & exit 0 Final script will be similiar as below: #!/bin/sh -e # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \"exit 0\" on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. # Print the IP address _IP=$(hostname -I) || true if [ \"$_IP\" ]; then printf \"My IP address is %s\\n\" \"$_IP\" fi sleep 5 sudo pon & exit 0 Make sure you have turned off WiFi or unplug Ethernet to make sure Raspberry Pi will use PPP in next bootup. Reboot Rapsberry Pi for step 9 to take effect. References \u00b6 For more references, please visit https://www.rhydolabz.com/wiki/?p=16325","title":"Testing NB-IoT HAT"},{"location":"raspberrypi/nbiot/#testing-raspberry-pi-sim7000e-nb-iot-hat-maxis-nb-iot","text":"","title":"Testing Raspberry Pi + SIM7000E NB-IoT Hat + Maxis NB-IoT"},{"location":"raspberrypi/nbiot/#nb-iot-at-command-testing","text":"AT command test is basic step to check if NB-IoT is working in good condition.","title":"NB-IoT AT command testing"},{"location":"raspberrypi/nbiot/#prerequisite","text":"Raspberry Pi SIM7000E NB-IoT HAT MicroUSB Type B Cable","title":"Prerequisite"},{"location":"raspberrypi/nbiot/#steps","text":"Insert and lock the NB-IoT SIM card onto NB-IoT HAT (Back). Connect the NB-IoT HAT to Raspberry Pi Board via USB cable. Run the command below on Raspberry Pi to check availability of HAT. It will show /dev/ttyUSB2 if it exists. ls /dev/ttyUSB2 Run the command below to install screen utility on Raspberry Pi, which allows us to communicate to HAT via UART. sudo apt-get install screen Run below command to start. screen /dev/ttyUSB2 115200 Type and enter AT command repeatedly until you see OK in return. Run AT commands below to test connection with Internet. ->: User input # test using AT -> AT OK # check firmware version, make sure it contains SIM7000E -> AT + GSV SIMCOM_Ltd SIMCOM_SIM7000E Revision : 1351 B06SIM7000E # check service, result might be different -> AT + CPSI ? + CPSI : GSM , Online , 502 - 12 , 0x1054 , 62168 , 512 DCS 1800 , - 71 , 0 , 32 - 32 -> AT + CPSI ? + CPSI : NO SERVICE , Online # check signal quality -> AT + CSQ + CSQ : 23 , 99 # configure to use NB-IoT -> AT + CMNB = 2 OK -> AT + CNMP = 38 OK -> AT + CBANDCFG = \"NB-IOT\" , 8 OK -> AT + CSTT = \"M2MXNBIOT\" OK -> AT + CPSI ? + CPSI : LTE NB - IOT , Online , 502 - 12 , 0x74CE , 28185722 , 12 , EUTRAN - BAND8 , 3702 , 0 , 0 , - 10 , - 82 , - 72 , 15 # check establish connection -> AT + CIPSTATUS OK STATE : IP START # start establish connection -> AT + CIICR OK -> AT + CIPSTATUS OK STATE : IP GPRSACT # get IP address -> AT + CIFSR 10.247.96.227 # ping www.google.com -> AT + CIPPING = \"www.google.com\" + CIPPING : 1 , \"172.217.166.132\" , 111 , 52 + CIPPING : 2 , \"172.217.166.132\" , 170 , 52 + CIPPING : 3 , \"172.217.166.132\" , 110 , 52 + CIPPING : 4 , \"172.217.166.132\" , 128 , 52 Run Ctrl-a then Ctrl-d to minimise the screen. To Resume the screen run screen -r . Run Ctrl-a then type: :quit to quit the screen.","title":"Steps"},{"location":"raspberrypi/nbiot/#ppp-installation-on-raspberry-pi","text":"NB-IoT HAT offers PPP (Point-to-Point Protocol) for us to connect Raspberry Pi to Internet easily. The following steps show how to establish Internet connection with Raspberry Pi.","title":"PPP Installation on Raspberry Pi"},{"location":"raspberrypi/nbiot/#prerequisite_1","text":"Raspberry Pi SIM7000E NB-IoT HAT MicroUSB Type B Cable","title":"Prerequisite"},{"location":"raspberrypi/nbiot/#steps_1","text":"Plug the NB-IoT HAT into Raspberry Pi Board using USB. Ensure the Maxis SIM card is inserted and secured on the HAT. Run the command below on Raspberry Pi to check availability of HAT. It will show /dev/ttyUSB2 if it exists. ls /dev/ttyUSB2 Go to directory where you have downloaded the GIT respository. E.g. /home/pi/maxis-nbiot-hackathon cd /home/pi/maxis-nbiot-hackathon Run the commands below to install PPP on Raspberry Pi as root. You will need to enter password after command sudo su $ sudo su $ cd \"Raspberry Pi/PPP Installer\" $ chmod +x install-ppp.sh $ ./install-ppp.sh Run command below to start the connection. pon Run command below to check if interface ppp0 exists. ifconfig If it is successful, you should see IP exists in interface ppp0 from ifconfig command. Run command below to stop the connection. poff Automate the connection during Raspberry Pi boot-up. Run command nano /etc/rc.local to start edit file. Insert 2 lines before line exit 0 in file ... sleep 5 sudo pon & exit 0 Final script will be similiar as below: #!/bin/sh -e # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \"exit 0\" on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. # Print the IP address _IP=$(hostname -I) || true if [ \"$_IP\" ]; then printf \"My IP address is %s\\n\" \"$_IP\" fi sleep 5 sudo pon & exit 0 Make sure you have turned off WiFi or unplug Ethernet to make sure Raspberry Pi will use PPP in next bootup. Reboot Rapsberry Pi for step 9 to take effect.","title":"Steps"},{"location":"raspberrypi/nbiot/#references","text":"For more references, please visit https://www.rhydolabz.com/wiki/?p=16325","title":"References"},{"location":"raspberrypi/send_telemetry_to_azure/","text":"Send simulated telemetry using Raspberry Pi \u00b6 We will be using Raspberry Pi to send simulated temperature and humidity telemetry for testing purpose. In this workshop, we will be using Python as main language. Steps \u00b6 Check if Python is installed. You can verify the current version of Python on your development machine using one of the following commands: Python2: python --version Python3: python3 --version You can download Python by running below commands. Python2: sudo apt-get install python Python3: sudo apt-get install python3 Download the sample Python project from https://github.com/Azure-Samples/azure-iot-samples-python/archive/master.zip and extract the ZIP archive. Make sure Boost Library is installed. sudo apt-get install libboost-python-dev Navigate to the root folder of the downloaded sample Python project. Then navigate to the iot-hub\\Quickstarts\\simulated-device folder. Open the SimulatedDevice.py file in a text editor of your choice. Replace the value of the CONNECTION_STRING variable with the device connection string you made a note of previously. Then save your changes to SimulatedDevice.py file. In the local terminal window, run the following commands to install the required libraries for the simulated device application: sudo pip install azure-iothub-device-client In the local terminal window, run the following commands to run the simulated device application: sudo python SimulatedDevice.py Troubleshoot To avoid the import iothub_client error The current version of the Azure IoT SDK for Python is a wrapper over our C SDK . It is generated using the Boost library. Because of that, it comes with several significant limitations. See more details here Check that you have the right version of Python . Be aware that only certain versions works fine for this sample. Check that you have the right version of C++ runtime Microsoft Visual C++ Redistributable for Visual Studio 2019 . (We recommend the latest). Verify that you have installed the iothub client: sudo pip install azure-iothub-device-client","title":"Send data to Azure"},{"location":"raspberrypi/send_telemetry_to_azure/#send-simulated-telemetry-using-raspberry-pi","text":"We will be using Raspberry Pi to send simulated temperature and humidity telemetry for testing purpose. In this workshop, we will be using Python as main language.","title":"Send simulated telemetry using Raspberry Pi"},{"location":"raspberrypi/send_telemetry_to_azure/#steps","text":"Check if Python is installed. You can verify the current version of Python on your development machine using one of the following commands: Python2: python --version Python3: python3 --version You can download Python by running below commands. Python2: sudo apt-get install python Python3: sudo apt-get install python3 Download the sample Python project from https://github.com/Azure-Samples/azure-iot-samples-python/archive/master.zip and extract the ZIP archive. Make sure Boost Library is installed. sudo apt-get install libboost-python-dev Navigate to the root folder of the downloaded sample Python project. Then navigate to the iot-hub\\Quickstarts\\simulated-device folder. Open the SimulatedDevice.py file in a text editor of your choice. Replace the value of the CONNECTION_STRING variable with the device connection string you made a note of previously. Then save your changes to SimulatedDevice.py file. In the local terminal window, run the following commands to install the required libraries for the simulated device application: sudo pip install azure-iothub-device-client In the local terminal window, run the following commands to run the simulated device application: sudo python SimulatedDevice.py Troubleshoot To avoid the import iothub_client error The current version of the Azure IoT SDK for Python is a wrapper over our C SDK . It is generated using the Boost library. Because of that, it comes with several significant limitations. See more details here Check that you have the right version of Python . Be aware that only certain versions works fine for this sample. Check that you have the right version of C++ runtime Microsoft Visual C++ Redistributable for Visual Studio 2019 . (We recommend the latest). Verify that you have installed the iothub client: sudo pip install azure-iothub-device-client","title":"Steps"},{"location":"web/expressjs_ionic/","text":"Example Web Application with ExpressJS + Ionic \u00b6 Prerequisite \u00b6 Install nodejs. Can be installed from official nodejs website Install Ionic. Run npm install -g ionic cordova Steps \u00b6 Setup Backend \u00b6 Go the Github repo that you have downloaded, e.g. <your/path/to/maxis-nbiot-hackathon> . The example project can be found on folder WebApplication/NodeJS . Go to the root folder of example project. Run command npm install to install dependencies. Create a file call .env at root folder of this project and write following content to the file. AZURE_CONNECTION_STRING =< your azure iot hub connection string > Finally, run command npm start to start the server. Setup Frontend \u00b6 At the same folder WebApplication/NodeJS , go to folder named frontend . Run command npm install to install dependencies. Run ionic serve . Open browser at http://localhost:8010 to see the result. Run ionic build --prod to build production files, which can be served by express server itself. If server is running, you can browse http://localhost:3000","title":"Express JS + Ionic"},{"location":"web/expressjs_ionic/#example-web-application-with-expressjs-ionic","text":"","title":"Example Web Application with ExpressJS + Ionic"},{"location":"web/expressjs_ionic/#prerequisite","text":"Install nodejs. Can be installed from official nodejs website Install Ionic. Run npm install -g ionic cordova","title":"Prerequisite"},{"location":"web/expressjs_ionic/#steps","text":"","title":"Steps"},{"location":"web/expressjs_ionic/#setup-backend","text":"Go the Github repo that you have downloaded, e.g. <your/path/to/maxis-nbiot-hackathon> . The example project can be found on folder WebApplication/NodeJS . Go to the root folder of example project. Run command npm install to install dependencies. Create a file call .env at root folder of this project and write following content to the file. AZURE_CONNECTION_STRING =< your azure iot hub connection string > Finally, run command npm start to start the server.","title":"Setup Backend"},{"location":"web/expressjs_ionic/#setup-frontend","text":"At the same folder WebApplication/NodeJS , go to folder named frontend . Run command npm install to install dependencies. Run ionic serve . Open browser at http://localhost:8010 to see the result. Run ionic build --prod to build production files, which can be served by express server itself. If server is running, you can browse http://localhost:3000","title":"Setup Frontend"},{"location":"web/node-red/","text":"IoT Web Application using Node Red \u00b6 Running Node Red on your Local Machine \u00b6 Node Red requires NodeJS installation. Refer here to install latest NodeJS package. In local terminal window, install Node Red. npm install node-red --unsafe-perm Run command node-red to start Node Red. If the output shows Server now running at http://127.0.0.1:1880/ , navigate to 127.0.0.1:1880 in your web browser. You should be able to see Node Red webview. Press Ctrl+C in terminal window to close Node Red. (Optional) By default, the Node-RED editor is not secured - anyone who can access its IP address can access the editor and deploy changes. This is only suitable if you are running on a trusted network. See this guide to secure your Node-RED application. Design your Node Red Application \u00b6 In this application, we are going to learn to: Run an application which reads telemetry of the device using Azure Node Red Library. Create a web UI view to display telemetry of the device. Send an email when alert is triggered. Read Telemetry from Azure IoT Hub \u00b6 Start Node Red, and browse to http://127.0.0.1:1880 Install node-red-contrib-azure-iot-hub via Manage Palette . Manage Palette can be found under dropdown menu from menu button at top right corner of browser window. From left pane of the browser window, scroll and search for Azure IoT Hub Receiver node under Cloud category, then drag it into the center of dashboard. From the same left pane under output category, drag debug node to the dashboard. (It will be renamed as msg.payload once it is placed at dashboard) Link it to Azure IoT Hub Receiver node. Double-click on the Azure IoT Hub Receiver node and enter your Iot Hub connectionString for your Azure IoT Hub and click Done. Click Deploy . You should see the below messages on your command line from where you are running NodeRED. The Azure IoT Hub Receiver node should now say 'Connected'. Once you have messages coming into your Azure IoT Hub, you should see them in the debug pane. The Azure IoT Hub Receiver node should now say 'Received'. Create a Web UI to display device telemetry \u00b6 We are going to create 2 widgets which show temperature and humidity of the sensor. Install node-red-dashboard using Manage Palette . Go to Hamburger Menu -> Import -> Clipboard. Paste the following code into the \"Import nodes\" dialog. Then click Import . [{ \"id\" : \"4748d9e2.be7648\" , \"type\" : \"tab\" , \"label\" : \"Flow 1\" , \"disabled\" : false , \"info\" : \"\" },{ \"id\" : \"706c73f9.d1df8c\" , \"type\" : \"azureiothubreceiver\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"Azure IoT Hub Receiver\" , \"x\" : 140 , \"y\" : 60 , \"wires\" : [[ \"3ba06501.57624a\" , \"4a231742.945ba8\" , \"6851aa80.949924\" ]]},{ \"id\" : \"3ba06501.57624a\" , \"type\" : \"debug\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"\" , \"active\" : true , \"tosidebar\" : true , \"console\" : false , \"tostatus\" : false , \"complete\" : \"true\" , \"targetType\" : \"full\" , \"x\" : 380 , \"y\" : 60 , \"wires\" : []},{ \"id\" : \"4a231742.945ba8\" , \"type\" : \"ui_gauge\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"Temperature\" , \"group\" : \"d4a658b7.4c8a28\" , \"order\" : 0 , \"width\" : \"6\" , \"height\" : \"6\" , \"gtype\" : \"gage\" , \"title\" : \"Temperature\" , \"label\" : \"\u00b0C\" , \"format\" : \"{{payload.temperature}}\" , \"min\" : 0 , \"max\" : \"100\" , \"colors\" : [ \"#00b500\" , \"#e6e600\" , \"#ca3838\" ], \"seg1\" : \"\" , \"seg2\" : \"\" , \"x\" : 429 , \"y\" : 147 , \"wires\" : []},{ \"id\" : \"6851aa80.949924\" , \"type\" : \"ui_gauge\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"Humidity\" , \"group\" : \"d4a658b7.4c8a28\" , \"order\" : 1 , \"width\" : \"6\" , \"height\" : \"6\" , \"gtype\" : \"gage\" , \"title\" : \"Humidity\" , \"label\" : \"%\" , \"format\" : \"{{payload.humidity}}\" , \"min\" : 0 , \"max\" : \"100\" , \"colors\" : [ \"#00b500\" , \"#e6e600\" , \"#ca3838\" ], \"seg1\" : \"\" , \"seg2\" : \"\" , \"x\" : 358 , \"y\" : 208 , \"wires\" : []},{ \"id\" : \"d4a658b7.4c8a28\" , \"type\" : \"ui_group\" , \"z\" : \"\" , \"name\" : \"Current Reading\" , \"tab\" : \"b8f8f747.dab748\" , \"order\" : 1 , \"disp\" : true , \"width\" : \"12\" , \"collapse\" : false },{ \"id\" : \"b8f8f747.dab748\" , \"type\" : \"ui_tab\" , \"z\" : \"\" , \"name\" : \"Overview\" , \"icon\" : \"dashboard\" , \"order\" : 1 , \"disabled\" : false , \"hidden\" : false }] Important !! Import flow including Azure IoT Hub Receiver node does not include connectionString by default. You will have to provide connectionString again. Double-click on the Azure IoT Hub Receiver node and enter your Iot Hub connectionString for your Azure IoT Hub and click Done. Click Deploy . Browse to http://127.0.0.1:1880/ui . You should be able to see the following screen. To know more about how to create customized Node Red Dashboard, you can visit https://randomnerdtutorials.com/getting-started-with-node-red-dashboard/ as a starting point. There are also many websites online for you to Google! Send an email when alert is triggered \u00b6 Here we will be using SendDrid service to send email for alert notification. You can use other option like Gmail service. Install SendGrid node node-red-contrib-sendgrid using Manage Palette in Node-RED. Create the flow by importing JSON below. [{\"id\":\"4748d9e2.be7648\",\"type\":\"tab\",\"label\":\"Flow 1\",\"disabled\":false,\"info\":\"\"},{\"id\":\"706c73f9.d1df8c\",\"type\":\"azureiothubreceiver\",\"z\":\"4748d9e2.be7648\",\"name\":\"Azure IoT Hub Receiver\",\"x\":140,\"y\":60,\"wires\":[[\"77746ec7.63db9\",\"3ba06501.57624a\"]]},{\"id\":\"3ba06501.57624a\",\"type\":\"debug\",\"z\":\"4748d9e2.be7648\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"x\":380,\"y\":60,\"wires\":[]},{\"id\":\"4f0d6c8e.4291e4\",\"type\":\"sendgrid\",\"z\":\"4748d9e2.be7648\",\"from\":\"no-reply@example.com\",\"to\":\"popfibo@gmail.com\",\"name\":\"Send email\",\"content\":\"text\",\"x\":962,\"y\":288,\"wires\":[]},{\"id\":\"77746ec7.63db9\",\"type\":\"switch\",\"z\":\"4748d9e2.be7648\",\"name\":\"Condition to send email\",\"property\":\"payload.temperature\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"gte\",\"v\":\"30\",\"vt\":\"str\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":1,\"x\":190,\"y\":291,\"wires\":[[\"167c7aa.94e2385\"]]},{\"id\":\"27bb65ef.759cba\",\"type\":\"template\",\"z\":\"4748d9e2.be7648\",\"name\":\"Email template\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Alert! The temperature from {{ deviceId }} has exceeded 30\u00b0C! Current temperature is {{ payload.temperature }}.\",\"output\":\"str\",\"x\":614,\"y\":290,\"wires\":[[\"38930ee.12709f2\"]]},{\"id\":\"167c7aa.94e2385\",\"type\":\"delay\",\"z\":\"4748d9e2.be7648\",\"name\":\"Limit 1 email per 5min\",\"pauseType\":\"rate\",\"timeout\":\"5\",\"timeoutUnits\":\"seconds\",\"rate\":\"1\",\"nbRateUnits\":\"5\",\"rateUnits\":\"minute\",\"randomFirst\":\"1\",\"randomLast\":\"5\",\"randomUnits\":\"seconds\",\"drop\":true,\"x\":416,\"y\":291,\"wires\":[[\"27bb65ef.759cba\"]]},{\"id\":\"38930ee.12709f2\",\"type\":\"change\",\"z\":\"4748d9e2.be7648\",\"name\":\"Email Settings\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"payload\",\"tot\":\"msg\"},{\"t\":\"set\",\"p\":\"topic\",\"pt\":\"msg\",\"to\":\"Temperature Alert\",\"tot\":\"str\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":792,\"y\":289,\"wires\":[[\"4f0d6c8e.4291e4\"]]}] You will see the screen as below. Get API key from SendGrid website . Double click on Send email node (which is a sendgrid node), fill in necessary info and paste the API key. Click Deploy . Explanation: \u00b6 Condition to send email is handled by Condition to send email node. When the temperature exceeds 30\u00b0C, the email will be sent. Email has a cooldown period of 5 minutes, during this time the email will not be sent although the temperature exceeds 30\u00b0C. This is handled by Limit 1 email per 5 min node. Email template node allows you to decide what content to be sent in email. Email settings node allows you to add extra parameters like topic, cc, bcc. Final result \u00b6 Backend Application UI Dashboard Full working JSON [{\"id\":\"bc488bc5.7b36c8\",\"type\":\"tab\",\"label\":\"Flow 1\",\"disabled\":false,\"info\":\"\"},{\"id\":\"72280523.04ccec\",\"type\":\"ui_group\",\"z\":\"\",\"name\":\"Current Reading\",\"tab\":\"619a0ac8.53b8a4\",\"order\":1,\"disp\":true,\"width\":\"12\",\"collapse\":false},{\"id\":\"619a0ac8.53b8a4\",\"type\":\"ui_tab\",\"z\":\"\",\"name\":\"Overview\",\"icon\":\"dashboard\",\"order\":1},{\"id\":\"74561fa2.60827\",\"type\":\"ui_base\",\"theme\":{\"name\":\"theme-light\",\"lightTheme\":{\"default\":\"#0094CE\",\"baseColor\":\"#0094CE\",\"baseFont\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\",\"edited\":true,\"reset\":false},\"darkTheme\":{\"default\":\"#097479\",\"baseColor\":\"#097479\",\"baseFont\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\",\"edited\":false},\"customTheme\":{\"name\":\"Untitled Theme 1\",\"default\":\"#4B7930\",\"baseColor\":\"#4B7930\",\"baseFont\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\"},\"themeState\":{\"base-color\":{\"default\":\"#0094CE\",\"value\":\"#0094CE\",\"edited\":false},\"page-titlebar-backgroundColor\":{\"value\":\"#0094CE\",\"edited\":false},\"page-backgroundColor\":{\"value\":\"#fafafa\",\"edited\":false},\"page-sidebar-backgroundColor\":{\"value\":\"#ffffff\",\"edited\":false},\"group-textColor\":{\"value\":\"#1bbfff\",\"edited\":false},\"group-borderColor\":{\"value\":\"#ffffff\",\"edited\":false},\"group-backgroundColor\":{\"value\":\"#ffffff\",\"edited\":false},\"widget-textColor\":{\"value\":\"#111111\",\"edited\":false},\"widget-backgroundColor\":{\"value\":\"#0094ce\",\"edited\":false},\"widget-borderColor\":{\"value\":\"#ffffff\",\"edited\":false},\"base-font\":{\"value\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\"}},\"angularTheme\":{\"primary\":\"indigo\",\"accents\":\"blue\",\"warn\":\"red\",\"background\":\"grey\"}},\"site\":{\"name\":\"Node-RED Dashboard\",\"hideToolbar\":\"false\",\"allowSwipe\":\"false\",\"dateFormat\":\"DD/MM/YYYY\",\"sizes\":{\"sx\":48,\"sy\":48,\"gx\":6,\"gy\":6,\"cx\":6,\"cy\":6,\"px\":0,\"py\":0}}},{\"id\":\"78f670e6.6d9bc\",\"type\":\"ui_group\",\"z\":\"\",\"name\":\"Current Reading\",\"tab\":\"78eac48a.20fd8c\",\"order\":1,\"disp\":true,\"width\":\"12\",\"collapse\":false},{\"id\":\"78eac48a.20fd8c\",\"type\":\"ui_tab\",\"z\":\"\",\"name\":\"Overview\",\"icon\":\"dashboard\",\"order\":1,\"disabled\":false,\"hidden\":false},{\"id\":\"b828193e.d6c448\",\"type\":\"ui_group\",\"z\":\"\",\"name\":\"Current Reading\",\"tab\":\"91d14d66.2b94\",\"order\":1,\"disp\":true,\"width\":\"12\",\"collapse\":false},{\"id\":\"91d14d66.2b94\",\"type\":\"ui_tab\",\"z\":\"\",\"name\":\"Overview\",\"icon\":\"dashboard\",\"order\":1,\"disabled\":false,\"hidden\":false},{\"id\":\"8ea2cd4f.2878c\",\"type\":\"azureiothubreceiver\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Azure IoT Hub Receiver\",\"x\":140,\"y\":60,\"wires\":[[\"8f36c520.fb5e58\",\"40b6b683.04c548\",\"89f0aa8d.578d48\",\"96844771.27e478\"]]},{\"id\":\"8f36c520.fb5e58\",\"type\":\"debug\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"x\":380,\"y\":60,\"wires\":[]},{\"id\":\"40b6b683.04c548\",\"type\":\"ui_gauge\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Temperature\",\"group\":\"b828193e.d6c448\",\"order\":0,\"width\":\"6\",\"height\":\"6\",\"gtype\":\"gage\",\"title\":\"Temperature\",\"label\":\"\u00b0C\",\"format\":\"{{payload.temperature}}\",\"min\":0,\"max\":\"100\",\"colors\":[\"#00b500\",\"#e6e600\",\"#ca3838\"],\"seg1\":\"\",\"seg2\":\"\",\"x\":429,\"y\":147,\"wires\":[]},{\"id\":\"89f0aa8d.578d48\",\"type\":\"ui_gauge\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Humidity\",\"group\":\"b828193e.d6c448\",\"order\":1,\"width\":\"6\",\"height\":\"6\",\"gtype\":\"gage\",\"title\":\"Humidity\",\"label\":\"%\",\"format\":\"{{payload.humidity}}\",\"min\":0,\"max\":\"100\",\"colors\":[\"#00b500\",\"#e6e600\",\"#ca3838\"],\"seg1\":\"\",\"seg2\":\"\",\"x\":358,\"y\":208,\"wires\":[]},{\"id\":\"a72bcedd.3440d\",\"type\":\"sendgrid\",\"z\":\"bc488bc5.7b36c8\",\"from\":\"\",\"to\":\"\",\"name\":\"Send email\",\"content\":\"text\",\"x\":1056,\"y\":292,\"wires\":[]},{\"id\":\"96844771.27e478\",\"type\":\"switch\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Condition to send email\",\"property\":\"payload.temperature\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"gte\",\"v\":\"30\",\"vt\":\"str\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":1,\"x\":260,\"y\":293,\"wires\":[[\"50792deb.086f44\"]]},{\"id\":\"33d14c05.c9e964\",\"type\":\"template\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Email template\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Alert! The temperature from {{ deviceId }} has exceeded 30\u00b0C! Current temperature is {{ payload.temperature }}\u00b0C.\",\"output\":\"str\",\"x\":703,\"y\":293,\"wires\":[[\"c97cd755.df9218\"]]},{\"id\":\"50792deb.086f44\",\"type\":\"delay\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Limit 1 email per 5min\",\"pauseType\":\"rate\",\"timeout\":\"5\",\"timeoutUnits\":\"seconds\",\"rate\":\"1\",\"nbRateUnits\":\"5\",\"rateUnits\":\"minute\",\"randomFirst\":\"1\",\"randomLast\":\"5\",\"randomUnits\":\"seconds\",\"drop\":true,\"x\":492,\"y\":293,\"wires\":[[\"33d14c05.c9e964\"]]},{\"id\":\"c97cd755.df9218\",\"type\":\"change\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Email Settings\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"payload\",\"tot\":\"msg\"},{\"t\":\"set\",\"p\":\"topic\",\"pt\":\"msg\",\"to\":\"Temperature Alert\",\"tot\":\"str\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":884,\"y\":292,\"wires\":[[\"a72bcedd.3440d\"]]}] Challenges \u00b6 You can implement other features in this application. Store telemetry of the device to database. Create a web UI which shows the analytics. .. and many more. You can look into https://github.com/Azure/node-red-contrib-azure for more libraries and modules for Azure. It is up to your creativity. The other libraries you may find useful for your application: Azure Blob Storage Azure CosmosDB (formerly DocumentDB) Azure Event Hub Azure SQL Azure Table Storage Save your work!!! \u00b6 One thing Node Red is good is that you can export your work to a JSON file. So if next time you are building a new machine and set up fresh Node Red, you can import the same file, do some configuration on nodes and you are ready to go! Export your application Download as JSON file Deploy on Microsoft Azure \u00b6 Once we have done developing the application, it is time for us to deploy it to the cloud so we can view it anywhere as long as we have Internet. Create base image \u00b6 Log in to the Azure console Select Virtual Machines option under Favourite List. In the list of Virtual Machines, select Ubuntu Server, then click \u2018Create\u2019 Give your machine a name, the username you want to use and the authentication details you want to use to access the instance Choose the Size of your instance. Remember that node.js is single-threaded so there\u2019s no benefit to picking a size with multiple cores for a simple node-red instance. A1 Basic is a good starting point On the \u2018Settings\u2019 step, click on the \u2018Network security group\u2019 option. Add a new \u2018Inbound rule\u2019 with the options set as: - Name : node - red - editor - Priority : 1010 - Protocol : TCP - Destination port range : 1880 Click \u2018Ok\u2019 on the Settings page, check the Summary then click \u2018Ok\u2019 to deploy the new instance After a couple of minutes your instance will be running. In the console you can find your instance\u2019s IP address. Setup Node Red \u00b6 The next task is to log into the instance then install node.js and Node-RED. Log into your instance using the authentication details you specified in the previous stage. Once logged in you need to install node.js and Node-RED. $ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - $ sudo apt-get install -y nodejs build-essential $ sudo npm install -g node-red At this point you can test your instance by running command below. node-red Note You may get some errors regarding the Serial node - that\u2019s to be expected and can be ignored. Once started, you can access the editor at http://<your-instance-ip>:1880/ . To get Node-RED to start automatically whenever your instance is restarted, you can use pm2: sudo npm install -g pm2 pm2 start `which node-red` -- -v pm2 save pm2 startup Import your Application \u00b6 If you have your application exported to JSON file from this step , deployment will be super easy! Go to Hamburger Menu -> Import -> Clipboard. Select select a file to import . Choose your desired JSON file to be import. Click Import to finish your import. Make sure your configuration is complete (e.g. Fill in Azure IoT Hub ConnectionString, SendGrid info etc.) Click Deploy . References \u00b6 For more information, please visit https://nodered.org/docs/getting-started/azure","title":"Node Red"},{"location":"web/node-red/#iot-web-application-using-node-red","text":"","title":"IoT Web Application using Node Red"},{"location":"web/node-red/#running-node-red-on-your-local-machine","text":"Node Red requires NodeJS installation. Refer here to install latest NodeJS package. In local terminal window, install Node Red. npm install node-red --unsafe-perm Run command node-red to start Node Red. If the output shows Server now running at http://127.0.0.1:1880/ , navigate to 127.0.0.1:1880 in your web browser. You should be able to see Node Red webview. Press Ctrl+C in terminal window to close Node Red. (Optional) By default, the Node-RED editor is not secured - anyone who can access its IP address can access the editor and deploy changes. This is only suitable if you are running on a trusted network. See this guide to secure your Node-RED application.","title":"Running Node Red on your Local Machine"},{"location":"web/node-red/#design-your-node-red-application","text":"In this application, we are going to learn to: Run an application which reads telemetry of the device using Azure Node Red Library. Create a web UI view to display telemetry of the device. Send an email when alert is triggered.","title":"Design your Node Red Application"},{"location":"web/node-red/#read-telemetry-from-azure-iot-hub","text":"Start Node Red, and browse to http://127.0.0.1:1880 Install node-red-contrib-azure-iot-hub via Manage Palette . Manage Palette can be found under dropdown menu from menu button at top right corner of browser window. From left pane of the browser window, scroll and search for Azure IoT Hub Receiver node under Cloud category, then drag it into the center of dashboard. From the same left pane under output category, drag debug node to the dashboard. (It will be renamed as msg.payload once it is placed at dashboard) Link it to Azure IoT Hub Receiver node. Double-click on the Azure IoT Hub Receiver node and enter your Iot Hub connectionString for your Azure IoT Hub and click Done. Click Deploy . You should see the below messages on your command line from where you are running NodeRED. The Azure IoT Hub Receiver node should now say 'Connected'. Once you have messages coming into your Azure IoT Hub, you should see them in the debug pane. The Azure IoT Hub Receiver node should now say 'Received'.","title":"Read Telemetry from Azure IoT Hub"},{"location":"web/node-red/#create-a-web-ui-to-display-device-telemetry","text":"We are going to create 2 widgets which show temperature and humidity of the sensor. Install node-red-dashboard using Manage Palette . Go to Hamburger Menu -> Import -> Clipboard. Paste the following code into the \"Import nodes\" dialog. Then click Import . [{ \"id\" : \"4748d9e2.be7648\" , \"type\" : \"tab\" , \"label\" : \"Flow 1\" , \"disabled\" : false , \"info\" : \"\" },{ \"id\" : \"706c73f9.d1df8c\" , \"type\" : \"azureiothubreceiver\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"Azure IoT Hub Receiver\" , \"x\" : 140 , \"y\" : 60 , \"wires\" : [[ \"3ba06501.57624a\" , \"4a231742.945ba8\" , \"6851aa80.949924\" ]]},{ \"id\" : \"3ba06501.57624a\" , \"type\" : \"debug\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"\" , \"active\" : true , \"tosidebar\" : true , \"console\" : false , \"tostatus\" : false , \"complete\" : \"true\" , \"targetType\" : \"full\" , \"x\" : 380 , \"y\" : 60 , \"wires\" : []},{ \"id\" : \"4a231742.945ba8\" , \"type\" : \"ui_gauge\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"Temperature\" , \"group\" : \"d4a658b7.4c8a28\" , \"order\" : 0 , \"width\" : \"6\" , \"height\" : \"6\" , \"gtype\" : \"gage\" , \"title\" : \"Temperature\" , \"label\" : \"\u00b0C\" , \"format\" : \"{{payload.temperature}}\" , \"min\" : 0 , \"max\" : \"100\" , \"colors\" : [ \"#00b500\" , \"#e6e600\" , \"#ca3838\" ], \"seg1\" : \"\" , \"seg2\" : \"\" , \"x\" : 429 , \"y\" : 147 , \"wires\" : []},{ \"id\" : \"6851aa80.949924\" , \"type\" : \"ui_gauge\" , \"z\" : \"4748d9e2.be7648\" , \"name\" : \"Humidity\" , \"group\" : \"d4a658b7.4c8a28\" , \"order\" : 1 , \"width\" : \"6\" , \"height\" : \"6\" , \"gtype\" : \"gage\" , \"title\" : \"Humidity\" , \"label\" : \"%\" , \"format\" : \"{{payload.humidity}}\" , \"min\" : 0 , \"max\" : \"100\" , \"colors\" : [ \"#00b500\" , \"#e6e600\" , \"#ca3838\" ], \"seg1\" : \"\" , \"seg2\" : \"\" , \"x\" : 358 , \"y\" : 208 , \"wires\" : []},{ \"id\" : \"d4a658b7.4c8a28\" , \"type\" : \"ui_group\" , \"z\" : \"\" , \"name\" : \"Current Reading\" , \"tab\" : \"b8f8f747.dab748\" , \"order\" : 1 , \"disp\" : true , \"width\" : \"12\" , \"collapse\" : false },{ \"id\" : \"b8f8f747.dab748\" , \"type\" : \"ui_tab\" , \"z\" : \"\" , \"name\" : \"Overview\" , \"icon\" : \"dashboard\" , \"order\" : 1 , \"disabled\" : false , \"hidden\" : false }] Important !! Import flow including Azure IoT Hub Receiver node does not include connectionString by default. You will have to provide connectionString again. Double-click on the Azure IoT Hub Receiver node and enter your Iot Hub connectionString for your Azure IoT Hub and click Done. Click Deploy . Browse to http://127.0.0.1:1880/ui . You should be able to see the following screen. To know more about how to create customized Node Red Dashboard, you can visit https://randomnerdtutorials.com/getting-started-with-node-red-dashboard/ as a starting point. There are also many websites online for you to Google!","title":"Create a Web UI to display device telemetry"},{"location":"web/node-red/#send-an-email-when-alert-is-triggered","text":"Here we will be using SendDrid service to send email for alert notification. You can use other option like Gmail service. Install SendGrid node node-red-contrib-sendgrid using Manage Palette in Node-RED. Create the flow by importing JSON below. [{\"id\":\"4748d9e2.be7648\",\"type\":\"tab\",\"label\":\"Flow 1\",\"disabled\":false,\"info\":\"\"},{\"id\":\"706c73f9.d1df8c\",\"type\":\"azureiothubreceiver\",\"z\":\"4748d9e2.be7648\",\"name\":\"Azure IoT Hub Receiver\",\"x\":140,\"y\":60,\"wires\":[[\"77746ec7.63db9\",\"3ba06501.57624a\"]]},{\"id\":\"3ba06501.57624a\",\"type\":\"debug\",\"z\":\"4748d9e2.be7648\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"x\":380,\"y\":60,\"wires\":[]},{\"id\":\"4f0d6c8e.4291e4\",\"type\":\"sendgrid\",\"z\":\"4748d9e2.be7648\",\"from\":\"no-reply@example.com\",\"to\":\"popfibo@gmail.com\",\"name\":\"Send email\",\"content\":\"text\",\"x\":962,\"y\":288,\"wires\":[]},{\"id\":\"77746ec7.63db9\",\"type\":\"switch\",\"z\":\"4748d9e2.be7648\",\"name\":\"Condition to send email\",\"property\":\"payload.temperature\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"gte\",\"v\":\"30\",\"vt\":\"str\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":1,\"x\":190,\"y\":291,\"wires\":[[\"167c7aa.94e2385\"]]},{\"id\":\"27bb65ef.759cba\",\"type\":\"template\",\"z\":\"4748d9e2.be7648\",\"name\":\"Email template\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Alert! The temperature from {{ deviceId }} has exceeded 30\u00b0C! Current temperature is {{ payload.temperature }}.\",\"output\":\"str\",\"x\":614,\"y\":290,\"wires\":[[\"38930ee.12709f2\"]]},{\"id\":\"167c7aa.94e2385\",\"type\":\"delay\",\"z\":\"4748d9e2.be7648\",\"name\":\"Limit 1 email per 5min\",\"pauseType\":\"rate\",\"timeout\":\"5\",\"timeoutUnits\":\"seconds\",\"rate\":\"1\",\"nbRateUnits\":\"5\",\"rateUnits\":\"minute\",\"randomFirst\":\"1\",\"randomLast\":\"5\",\"randomUnits\":\"seconds\",\"drop\":true,\"x\":416,\"y\":291,\"wires\":[[\"27bb65ef.759cba\"]]},{\"id\":\"38930ee.12709f2\",\"type\":\"change\",\"z\":\"4748d9e2.be7648\",\"name\":\"Email Settings\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"payload\",\"tot\":\"msg\"},{\"t\":\"set\",\"p\":\"topic\",\"pt\":\"msg\",\"to\":\"Temperature Alert\",\"tot\":\"str\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":792,\"y\":289,\"wires\":[[\"4f0d6c8e.4291e4\"]]}] You will see the screen as below. Get API key from SendGrid website . Double click on Send email node (which is a sendgrid node), fill in necessary info and paste the API key. Click Deploy .","title":"Send an email when alert is triggered"},{"location":"web/node-red/#explanation","text":"Condition to send email is handled by Condition to send email node. When the temperature exceeds 30\u00b0C, the email will be sent. Email has a cooldown period of 5 minutes, during this time the email will not be sent although the temperature exceeds 30\u00b0C. This is handled by Limit 1 email per 5 min node. Email template node allows you to decide what content to be sent in email. Email settings node allows you to add extra parameters like topic, cc, bcc.","title":"Explanation:"},{"location":"web/node-red/#final-result","text":"Backend Application UI Dashboard Full working JSON [{\"id\":\"bc488bc5.7b36c8\",\"type\":\"tab\",\"label\":\"Flow 1\",\"disabled\":false,\"info\":\"\"},{\"id\":\"72280523.04ccec\",\"type\":\"ui_group\",\"z\":\"\",\"name\":\"Current Reading\",\"tab\":\"619a0ac8.53b8a4\",\"order\":1,\"disp\":true,\"width\":\"12\",\"collapse\":false},{\"id\":\"619a0ac8.53b8a4\",\"type\":\"ui_tab\",\"z\":\"\",\"name\":\"Overview\",\"icon\":\"dashboard\",\"order\":1},{\"id\":\"74561fa2.60827\",\"type\":\"ui_base\",\"theme\":{\"name\":\"theme-light\",\"lightTheme\":{\"default\":\"#0094CE\",\"baseColor\":\"#0094CE\",\"baseFont\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\",\"edited\":true,\"reset\":false},\"darkTheme\":{\"default\":\"#097479\",\"baseColor\":\"#097479\",\"baseFont\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\",\"edited\":false},\"customTheme\":{\"name\":\"Untitled Theme 1\",\"default\":\"#4B7930\",\"baseColor\":\"#4B7930\",\"baseFont\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\"},\"themeState\":{\"base-color\":{\"default\":\"#0094CE\",\"value\":\"#0094CE\",\"edited\":false},\"page-titlebar-backgroundColor\":{\"value\":\"#0094CE\",\"edited\":false},\"page-backgroundColor\":{\"value\":\"#fafafa\",\"edited\":false},\"page-sidebar-backgroundColor\":{\"value\":\"#ffffff\",\"edited\":false},\"group-textColor\":{\"value\":\"#1bbfff\",\"edited\":false},\"group-borderColor\":{\"value\":\"#ffffff\",\"edited\":false},\"group-backgroundColor\":{\"value\":\"#ffffff\",\"edited\":false},\"widget-textColor\":{\"value\":\"#111111\",\"edited\":false},\"widget-backgroundColor\":{\"value\":\"#0094ce\",\"edited\":false},\"widget-borderColor\":{\"value\":\"#ffffff\",\"edited\":false},\"base-font\":{\"value\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif\"}},\"angularTheme\":{\"primary\":\"indigo\",\"accents\":\"blue\",\"warn\":\"red\",\"background\":\"grey\"}},\"site\":{\"name\":\"Node-RED Dashboard\",\"hideToolbar\":\"false\",\"allowSwipe\":\"false\",\"dateFormat\":\"DD/MM/YYYY\",\"sizes\":{\"sx\":48,\"sy\":48,\"gx\":6,\"gy\":6,\"cx\":6,\"cy\":6,\"px\":0,\"py\":0}}},{\"id\":\"78f670e6.6d9bc\",\"type\":\"ui_group\",\"z\":\"\",\"name\":\"Current Reading\",\"tab\":\"78eac48a.20fd8c\",\"order\":1,\"disp\":true,\"width\":\"12\",\"collapse\":false},{\"id\":\"78eac48a.20fd8c\",\"type\":\"ui_tab\",\"z\":\"\",\"name\":\"Overview\",\"icon\":\"dashboard\",\"order\":1,\"disabled\":false,\"hidden\":false},{\"id\":\"b828193e.d6c448\",\"type\":\"ui_group\",\"z\":\"\",\"name\":\"Current Reading\",\"tab\":\"91d14d66.2b94\",\"order\":1,\"disp\":true,\"width\":\"12\",\"collapse\":false},{\"id\":\"91d14d66.2b94\",\"type\":\"ui_tab\",\"z\":\"\",\"name\":\"Overview\",\"icon\":\"dashboard\",\"order\":1,\"disabled\":false,\"hidden\":false},{\"id\":\"8ea2cd4f.2878c\",\"type\":\"azureiothubreceiver\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Azure IoT Hub Receiver\",\"x\":140,\"y\":60,\"wires\":[[\"8f36c520.fb5e58\",\"40b6b683.04c548\",\"89f0aa8d.578d48\",\"96844771.27e478\"]]},{\"id\":\"8f36c520.fb5e58\",\"type\":\"debug\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"x\":380,\"y\":60,\"wires\":[]},{\"id\":\"40b6b683.04c548\",\"type\":\"ui_gauge\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Temperature\",\"group\":\"b828193e.d6c448\",\"order\":0,\"width\":\"6\",\"height\":\"6\",\"gtype\":\"gage\",\"title\":\"Temperature\",\"label\":\"\u00b0C\",\"format\":\"{{payload.temperature}}\",\"min\":0,\"max\":\"100\",\"colors\":[\"#00b500\",\"#e6e600\",\"#ca3838\"],\"seg1\":\"\",\"seg2\":\"\",\"x\":429,\"y\":147,\"wires\":[]},{\"id\":\"89f0aa8d.578d48\",\"type\":\"ui_gauge\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Humidity\",\"group\":\"b828193e.d6c448\",\"order\":1,\"width\":\"6\",\"height\":\"6\",\"gtype\":\"gage\",\"title\":\"Humidity\",\"label\":\"%\",\"format\":\"{{payload.humidity}}\",\"min\":0,\"max\":\"100\",\"colors\":[\"#00b500\",\"#e6e600\",\"#ca3838\"],\"seg1\":\"\",\"seg2\":\"\",\"x\":358,\"y\":208,\"wires\":[]},{\"id\":\"a72bcedd.3440d\",\"type\":\"sendgrid\",\"z\":\"bc488bc5.7b36c8\",\"from\":\"\",\"to\":\"\",\"name\":\"Send email\",\"content\":\"text\",\"x\":1056,\"y\":292,\"wires\":[]},{\"id\":\"96844771.27e478\",\"type\":\"switch\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Condition to send email\",\"property\":\"payload.temperature\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"gte\",\"v\":\"30\",\"vt\":\"str\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":1,\"x\":260,\"y\":293,\"wires\":[[\"50792deb.086f44\"]]},{\"id\":\"33d14c05.c9e964\",\"type\":\"template\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Email template\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"Alert! The temperature from {{ deviceId }} has exceeded 30\u00b0C! Current temperature is {{ payload.temperature }}\u00b0C.\",\"output\":\"str\",\"x\":703,\"y\":293,\"wires\":[[\"c97cd755.df9218\"]]},{\"id\":\"50792deb.086f44\",\"type\":\"delay\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Limit 1 email per 5min\",\"pauseType\":\"rate\",\"timeout\":\"5\",\"timeoutUnits\":\"seconds\",\"rate\":\"1\",\"nbRateUnits\":\"5\",\"rateUnits\":\"minute\",\"randomFirst\":\"1\",\"randomLast\":\"5\",\"randomUnits\":\"seconds\",\"drop\":true,\"x\":492,\"y\":293,\"wires\":[[\"33d14c05.c9e964\"]]},{\"id\":\"c97cd755.df9218\",\"type\":\"change\",\"z\":\"bc488bc5.7b36c8\",\"name\":\"Email Settings\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"payload\",\"tot\":\"msg\"},{\"t\":\"set\",\"p\":\"topic\",\"pt\":\"msg\",\"to\":\"Temperature Alert\",\"tot\":\"str\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":884,\"y\":292,\"wires\":[[\"a72bcedd.3440d\"]]}]","title":"Final result"},{"location":"web/node-red/#challenges","text":"You can implement other features in this application. Store telemetry of the device to database. Create a web UI which shows the analytics. .. and many more. You can look into https://github.com/Azure/node-red-contrib-azure for more libraries and modules for Azure. It is up to your creativity. The other libraries you may find useful for your application: Azure Blob Storage Azure CosmosDB (formerly DocumentDB) Azure Event Hub Azure SQL Azure Table Storage","title":"Challenges"},{"location":"web/node-red/#save-your-work","text":"One thing Node Red is good is that you can export your work to a JSON file. So if next time you are building a new machine and set up fresh Node Red, you can import the same file, do some configuration on nodes and you are ready to go! Export your application Download as JSON file","title":"Save your work!!!"},{"location":"web/node-red/#deploy-on-microsoft-azure","text":"Once we have done developing the application, it is time for us to deploy it to the cloud so we can view it anywhere as long as we have Internet.","title":"Deploy on Microsoft Azure"},{"location":"web/node-red/#create-base-image","text":"Log in to the Azure console Select Virtual Machines option under Favourite List. In the list of Virtual Machines, select Ubuntu Server, then click \u2018Create\u2019 Give your machine a name, the username you want to use and the authentication details you want to use to access the instance Choose the Size of your instance. Remember that node.js is single-threaded so there\u2019s no benefit to picking a size with multiple cores for a simple node-red instance. A1 Basic is a good starting point On the \u2018Settings\u2019 step, click on the \u2018Network security group\u2019 option. Add a new \u2018Inbound rule\u2019 with the options set as: - Name : node - red - editor - Priority : 1010 - Protocol : TCP - Destination port range : 1880 Click \u2018Ok\u2019 on the Settings page, check the Summary then click \u2018Ok\u2019 to deploy the new instance After a couple of minutes your instance will be running. In the console you can find your instance\u2019s IP address.","title":"Create base image"},{"location":"web/node-red/#setup-node-red","text":"The next task is to log into the instance then install node.js and Node-RED. Log into your instance using the authentication details you specified in the previous stage. Once logged in you need to install node.js and Node-RED. $ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - $ sudo apt-get install -y nodejs build-essential $ sudo npm install -g node-red At this point you can test your instance by running command below. node-red Note You may get some errors regarding the Serial node - that\u2019s to be expected and can be ignored. Once started, you can access the editor at http://<your-instance-ip>:1880/ . To get Node-RED to start automatically whenever your instance is restarted, you can use pm2: sudo npm install -g pm2 pm2 start `which node-red` -- -v pm2 save pm2 startup","title":"Setup Node Red"},{"location":"web/node-red/#import-your-application","text":"If you have your application exported to JSON file from this step , deployment will be super easy! Go to Hamburger Menu -> Import -> Clipboard. Select select a file to import . Choose your desired JSON file to be import. Click Import to finish your import. Make sure your configuration is complete (e.g. Fill in Azure IoT Hub ConnectionString, SendGrid info etc.) Click Deploy .","title":"Import your Application"},{"location":"web/node-red/#references","text":"For more information, please visit https://nodered.org/docs/getting-started/azure","title":"References"}]}